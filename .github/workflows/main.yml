name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  generate-tag:
    name: Generate New Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.generate_tag.outputs.new_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Generate new tag
        id: generate_tag
        run: |
          # 如果没有找到标签，则创建初始标签 v0.1.0
          if [ -z "${{ env.LATEST_TAG }}" ]; then
            NEW_TAG="v0.1.0"
          else
            # 从最新标签中提取版本号
            VERSION=${LATEST_TAG#v}
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            # 根据用户选择的版本类型增加版本号
            if [ "${{ github.event.inputs.version_type }}" == "major" ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ "${{ github.event.inputs.version_type }}" == "minor" ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          
      - name: Create tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}
          echo "Created and pushed new tag: ${{ env.NEW_TAG }}"

  build:
    name: Build and Release
    needs: generate-tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get tag name
        run: echo "REPO_TAG=$(echo "${{ needs.generate-tag.outputs.new_tag }}" | sed 's/^v//')" >> $GITHUB_ENV
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      - name: Get Go dependencies
        run: go get
      - name: Build Linux amd64
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o grok3_api app-test.go
          tar -czvf grok3_api-${{ env.REPO_TAG }}-linux-amd64.tar.gz grok3_api
      - name: Build Windows amd64 (app-test)
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o app-test.exe app-test.go
          tar -czvf app-test-${{ env.REPO_TAG }}-windows-amd64.tar.gz app-test.exe
      - name: Build Windows amd64 (stable version)
        run: |
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o app.exe 稳定版/app.go
          tar -czvf app-stable-${{ env.REPO_TAG }}-windows-amd64.tar.gz app.exe
      - name: Build Darwin amd64
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o grok3_api app-test.go
          tar -czvf grok3_api-${{ env.REPO_TAG }}-darwin-amd64.tar.gz grok3_api
      - name: Build Darwin arm64
        run: |
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o grok3_api app-test.go
          tar -czvf grok3_api-${{ env.REPO_TAG }}-darwin-arm64.tar.gz grok3_api
      - name: Release artifacts
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.tar.gz"
          tag_name: "${{ needs.generate-tag.outputs.new_tag }}"